{"version":3,"sources":["limsDataProvider.js","ShipSampButton.js","samples.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","httpClient","fetchUtils","fetchJson","getList","resource","params","pagination","page","perPage","sort","field","order","query","JSON","stringify","range","filter","console","log","url","then","headers","data","json","total","getOne","id_val","parseInt","id","getMany","ids","getManyReference","target","get","split","pop","update","method","body","updateMany","create","delete","deleteMany","ShipSamplesButton","selectedIds","useState","open","setOpen","refresh","useRefresh","notify","useNotify","unselectAll","useUnselectAll","useUpdateMany","ss_id","onSuccess","onFailure","error","loading","Button","label","onClick","Confirm","isOpen","title","content","onConfirm","onClose","SamplesFilter","props","Filter","ReferenceInput","source","reference","SelectInput","optionText","SamplesBulkActionButtons","ShipSampButton","BulkDeleteButton","SampleEdit","Edit","SimpleForm","TextInput","DateInput","NumberInput","SampleList","List","filters","bulkActionButtons","Datagrid","TextField","ReferenceField","DateField","EditButton","SampleCreate","Create","App","Admin","dataProvider","Resource","name","list","edit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.00e16230.chunk.js","sourcesContent":["import { fetchUtils } from 'react-admin';\r\nimport { stringify } from 'query-string';\r\n\r\nconst apiUrl = 'http://localhost:5000/api';\r\nconst httpClient = fetchUtils.fetchJson;\r\n\r\nexport default {\r\n    getList: (resource, params) => {\r\n        const { page, perPage } = params.pagination;\r\n        const { field, order } = params.sort;\r\n        const query = {\r\n            sort: JSON.stringify([field, order]),\r\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\r\n            filter: JSON.stringify(params.filter),\r\n        };\r\n        console.log(query);\r\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\r\n\r\n        return httpClient(url).then(({ headers, json }) => ({\r\n            data: json,\r\n            total: 100,\r\n        }));\r\n    },\r\n\r\n    getOne: (resource, params) => {\r\n        console.log(\"GETONE Called\")\r\n        const id_val = [parseInt(params.id)]\r\n        const query = {\r\n            filter: JSON.stringify({id: id_val}),\r\n        };\r\n        // console.log(\"GetOne\", query);\r\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\r\n        // console.log(\"GETONE url\", url);\r\n        return httpClient(url).then(({ json }) => ({ data: json }));\r\n    },\r\n\r\n    getMany: (resource, params) => {\r\n        console.log(\"GETMANY Called\");\r\n        const query = {\r\n            filter: JSON.stringify({id: params.ids}),\r\n        };\r\n        console.log(query);\r\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\r\n        return httpClient(url).then(({ json }) => ({ data: json }));\r\n    },\r\n\r\n    getManyReference: (resource, params) => {\r\n        const { page, perPage } = params.pagination;\r\n        const { field, order } = params.sort;\r\n        const query = {\r\n            sort: JSON.stringify([field, order]),\r\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\r\n            filter: JSON.stringify({\r\n                ...params.filter,\r\n                [params.target]: params.id,\r\n            }),\r\n        };\r\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\r\n\r\n        return httpClient(url).then(({ headers, json }) => ({\r\n            data: json,\r\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\r\n        }));\r\n    },\r\n\r\n    update: (resource, params) =>{\r\n        console.log(\"UPDATE called\");\r\n        params.data['ids'] = [params.data.id]\r\n        return httpClient(`${apiUrl}/${resource}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params.data),\r\n        }).then(({ json }) => ({ data: json }))},\r\n\r\n\r\n    updateMany: (resource, params) => {\r\n        params.data['ids'] = params.ids;\r\n\r\n        return httpClient(`${apiUrl}/${resource}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params.data),\r\n        }).then(({ json }) => ({ data: json }));\r\n    },\r\n\r\n    create: (resource, params) =>{\r\n        console.log(\"CREATE called\");\r\n        console.log(params);\r\n        return httpClient(`${apiUrl}/${resource}`, {\r\n              method: 'POST',\r\n              body: JSON.stringify(params.data),\r\n              }).then(({ json }) => ({\r\n                  data: { ...params.data, id: json.id },\r\n              }))},\r\n\r\n    delete: (resource, params) =>\r\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\r\n            method: 'DELETE',\r\n        }).then(({ json }) => ({ data: json })),\r\n\r\n    deleteMany: (resource, params) => {\r\n        const query = {\r\n            filter: JSON.stringify({ id: params.ids}),\r\n        };\r\n        return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\r\n            method: 'DELETE',\r\n            body: JSON.stringify(params.data),\r\n        }).then(({ json }) => ({ data: json }));\r\n    },\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Button,\r\n    Confirm,\r\n    useUpdateMany,\r\n    useRefresh,\r\n    useNotify,\r\n    useUnselectAll,\r\n} from 'react-admin';\r\n\r\nconst ShipSamplesButton = ({ selectedIds }) => {\r\n    const [open, setOpen] = useState(false);\r\n    const refresh = useRefresh();\r\n    const notify = useNotify();\r\n    const unselectAll = useUnselectAll();\r\n    const [updateMany, { loading }] = useUpdateMany(\r\n        'samples',\r\n        selectedIds,\r\n        { ss_id: -1 },\r\n        {\r\n            onSuccess: () => {\r\n                refresh();\r\n                notify('Samples updated');\r\n                unselectAll('samples');\r\n            },\r\n            onFailure: error => notify('Error: samples not updated', 'warning'),\r\n        }\r\n    );\r\n    const handleClick = () => setOpen(true);\r\n    const handleDialogClose = () => setOpen(false);\r\n\r\n    const handleConfirm = () => {\r\n        updateMany();\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Button label=\"Ship Samples\" onClick={handleClick} />\r\n            <Confirm\r\n                isOpen={open}\r\n                loading={loading}\r\n                title=\"Ship Samples\"\r\n                content=\"Are you sure you want to Ship These Samples?\"\r\n                onConfirm={handleConfirm}\r\n                onClose={handleDialogClose}\r\n            />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default ShipSamplesButton;","// in src/users.js\r\nimport React, {Fragment} from 'react';\r\nimport { Filter, List, Datagrid, TextField, EmailField, ReferenceField,\r\n        ReferenceInput, SelectInput, NumberField, DateField, EditButton,\r\n        Edit, SimpleForm, TextInput, DateInput, NumberInput, BulkDeleteButton, Create} from 'react-admin';\r\nimport ShipSampButton from './ShipSampButton';\r\n\r\nconst SamplesFilter = (props) => (\r\n    <Filter {...props}>\r\n        <ReferenceInput label=\"Technician\" source=\"u_id\" reference=\"users\">\r\n            <SelectInput optionText=\"last_name\" />\r\n        </ReferenceInput>\r\n        <ReferenceInput label=\"Project\" source=\"p_id\" reference=\"projects\">\r\n            <SelectInput optionText=\"p_name\" />\r\n        </ReferenceInput>\r\n    </Filter>\r\n);\r\n\r\nconst SamplesBulkActionButtons = props => (\r\n    <Fragment>\r\n        <ShipSampButton label=\"Ship Samples\" {...props} />\r\n        {/* default bulk delete action */}\r\n        <BulkDeleteButton {...props} />\r\n    </Fragment>\r\n);\r\n\r\nexport const SampleEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"id\" />\r\n            <TextInput source=\"sa_name\" />\r\n            <ReferenceInput source=\"u_id\" reference=\"users\"><SelectInput optionText=\"last_name\" /></ReferenceInput>\r\n            <ReferenceInput source=\"ss_id\" reference=\"s_status\"><SelectInput optionText=\"ss_name\" /></ReferenceInput>\r\n            <ReferenceInput source=\"p_id\" reference=\"projects\"><SelectInput optionText=\"p_name\" /></ReferenceInput>\r\n            <DateInput source=\"loc\" />\r\n            <NumberInput source=\"date_cryo\" />\r\n            <DateInput source=\"date_exp\" />\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const SampleList = props => (\r\n    <List filters={<SamplesFilter/>}{...props} bulkActionButtons={<SamplesBulkActionButtons />} >\r\n        <Datagrid>\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"sa_name\" />\r\n            <ReferenceField source=\"u_id\" reference=\"users\">\r\n                <TextField source=\"last_name\" label=\"Technician\" />\r\n            </ReferenceField>\r\n            <ReferenceField source=\"ss_id\" reference=\"s_status\">\r\n                <TextField source=\"ss_name\" label=\"Status\" />\r\n            </ReferenceField>\r\n            <ReferenceField source=\"p_id\" reference=\"projects\">\r\n                <TextField source=\"p_name\" label=\"Project\" />\r\n            </ReferenceField>\r\n            <TextField source=\"loc\" />\r\n            <DateField source=\"date_cryo\" />\r\n            <DateField source=\"date_exp\" />\r\n            <EditButton/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const SampleCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n          <ReferenceInput source=\"u_id\" reference=\"users\" label=\"User\">\r\n            <SelectInput optionText=\"last_name\" />\r\n          </ReferenceInput>\r\n          <ReferenceInput source=\"ss_id\" reference=\"s_status\" label=\"Status\">\r\n            <SelectInput optionText=\"ss_name\" />\r\n          </ReferenceInput>\r\n          <ReferenceInput source=\"p_id\" reference=\"projects\" label=\"Projects\">\r\n            <SelectInput optionText=\"p_name\" />\r\n          </ReferenceInput>\r\n          <TextInput source=\"loc\" label=\"Location\"/>\r\n          <DateInput source=\"date_cryo\" label=\"Cryo Date\" />\r\n          <DateInput source=\"date_exp\" label=\"Expiration Date\"/>\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\n// export const SampleEdit = props => (\r\n//     <Edit {...props}>\r\n//         <SimpleForm>\r\n//            <TextInput disabled source=\"id\" />\r\n//            <ReferenceInput source=\"p_id\" reference=\"projects\">\r\n//               <SelectInput optionText=\"p_name\" />\r\n//            </ReferenceInput>\r\n//             <ReferenceInput source=\"u_id\" reference=\"users\">\r\n//                <SelectInput optionText=\"last_name\" />\r\n//             </ReferenceInput>\r\n//             <TextInput source=\"loc\" />\r\n//         </SimpleForm>\r\n//     </Edit>\r\n// );\r\n","import React from 'react';\r\nimport { Admin, Resource, ListGuesser, EditGuesser } from 'react-admin';\r\nimport dataProvider from './limsDataProvider';\r\nimport {SampleList, SampleEdit, SampleCreate} from './samples'\r\n\r\nconst App = () => (\r\n      <Admin dataProvider={dataProvider}>\r\n          <Resource name=\"samples\" list={SampleList} edit={SampleEdit} create={SampleCreate} />\r\n          <Resource name=\"users\" />\r\n          <Resource name=\"projects\" />\r\n          <Resource name=\"s_status\" />\r\n      </Admin>\r\n  );\r\n\r\n  export default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}